<?php

namespace UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Finder\Finder;
use UserBundle\Entity\Costanti;


/**
 * RegistriRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class RegistriRepository extends \Doctrine\ORM\EntityRepository
{
    use \UserBundle\Helper\ControllerHelper;


    public function totaleRegistri() {
        $qb = $this->getEntityManager();
        
        $query = $qb
            ->createQueryBuilder()->select('r.id')
            ->from('UserBundle:Registri', 'r')
            ->where('1=1');
            
        return $query->getQuery()->getResult();
    }
    
    
    public function listaRegistri($limit, $offset, $sortBy, $sortType, $id, $id_titolari, $numero_fascicolo, $id_mittenti, $data_arrivo_from, $data_arrivo_to, $protocollo_arrivo, $protocollo_mittente, $oggetto) {
        $parameters = array ();
        $filter = "";
        
        if ($id != "") {
            $filter .= " AND f.id = :id ";
            $parameters['id'] = $id;
        }
        if ($id_titolari != "") {
            $filter .= " AND f.idTitolari = :idTitolari ";
            $parameters['idTitolari'] = $id_titolari;
        }
        if ($numero_fascicolo != "") {
            $filter .= " AND f.numeroFascicolo = :numeroFascicolo ";
            $parameters['numeroFascicolo'] = $numero_fascicolo;
        }
        if ($id_mittenti != "") {
            $filter .= " AND f.idMittenti = :idMittenti ";
            $parameters['idMittenti'] = $id_mittenti;
        }
        if ($data_arrivo_from != "") {
            $filter .= " AND f.dataArrivo >= :dataArrivo ";
            $parameters['dataArrivo'] = $data_arrivo_from;
        }
        if ($data_arrivo_to != "") {
            $filter .= " AND f.dataArrivo <= :dataArrivo ";
            $parameters['dataArrivo'] = $data_arrivo_to;
        }
        if ($protocollo_arrivo != "") {
            $filter .= " AND f.protocolloArrivo = :protocolloArrivo ";
            $parameters['protocolloArrivo'] = $protocollo_arrivo;
        }
        if ($protocollo_mittente != "") {
            $filter .= " AND f.protocolloMittente = :protocolloMittente ";
            $parameters['protocolloMittente'] = $protocollo_mittente;
        }
        if ($oggetto != "") {
            $filter .= " AND f.oggetto LIKE :oggetto ";
            $parameters['oggetto'] = '%'.$oggetto.'%';
        }

        
        $qb = $this->getEntityManager();
        $query = $qb
            ->createQueryBuilder()->select('f')
            ->from('UserBundle:Registri', 'f')
            ->where('1=1' . $filter)
            ->setParameters($parameters)
            ->setFirstResult( $offset )
            ->setMaxResults( $limit )
            ->orderBy('f.'.$sortBy, $sortType);
            
            
        //print_r($query->getDql());

        return $query->getQuery()->getResult();

    }
		
		
		
    public function schedaRegistro($id) {
          
        $parameters = array ();
        $filter = "";
		$filter .= " AND r.id = :id ";
		$parameters['id'] = $id;

        $qb = $this->getEntityManager();

        $query = $qb
            ->createQueryBuilder()->select('r.id as id,
                                            r.dataArrivo as data_arrivo,
                                            r.protocolloArrivo as protocollo_arrivo,
                                            r.dataMittente as data_mittente,
                                            r.protocolloMittente as protocollo_mittente,
                                            r.oggetto as oggetto,
                                            r.mittente as mittente,
                                            r.codiceTitolario as codice_titolario,
                                            r.numeroFascicolo as numero_fascicolo,
                                            r.numeroSottofascicolo as numero_sottofascicolo,
                                            r.denominazioneSottofascicolo as denominazione_sottofascicolo,
                                            r.propostaCipe as proposta_cipe,
                                            r.annotazioni as annotazioni,
                                            r.idSottofascicoli as id_sottofascicoli,
                                            r.idMittenti as id_mittenti,
                                            r.idTitolari as id_titolari,
                                            r.idFascicoli as id_fascicoli,
                                            raf.idAmministrazioni as id_amministrazioni,
                                            t.idTags as id_tags
                                            ')
            ->from('UserBundle:Registri', 'r')
			->leftJoin('UserBundle:RelAmministrazioniRegistri', 'raf', 'WITH', 'r.id = raf.idRegistri')
            ->leftJoin('UserBundle:RelTagsRegistri', 't', 'WITH', 'r.id = t.idRegistri')
            ->where('1=1' . $filter)
            ->setParameters($parameters);
            
            
        //print_r($query->getDql());
        //print_r($query->getQuery()->getSql());

        return $query->getQuery()->getResult(\Doctrine\ORM\Query::HYDRATE_SCALAR);
        //return $query->getQuery()->getResult();
        
    }
    
 


    public function getDataPath($id) {
        $parameters = array ();
        $filter = "";
		$filter .= " AND r.id = :id ";
		$parameters['id'] = $id;

        $qb = $this->getEntityManager();

        $query = $qb
            ->createQueryBuilder()->select('r.id as id,
                                            t.codice,
                                            t.denominazione,
                                            f.numeroFascicolo as numero_fascicolo'
										)
            ->from('UserBundle:Registri', 'r')
			->leftJoin('UserBundle:Titolari', 't', 'WITH', 'r.idTitolari = t.id')
			->leftJoin('UserBundle:Fascicoli', 'f', 'WITH', 'r.idFascicoli = f.id')
            ->where('1=1' . $filter)
            ->setParameters($parameters);

        return $query->getQuery()->getResult(\Doctrine\ORM\Query::HYDRATE_SCALAR);
    }
    
    public function getAllegatiByIdRegistro($id) {
        $parameters = array ();
        $filter = "";
        $filter .= " AND rar.idRegistri = :id ";
        $parameters['id'] = $id;

        $qb = $this->getEntityManager();

        $query = $qb
            ->createQueryBuilder()->select('a.id as id,
                                            a.data as data,
                                            a.file as file,
                                            rar.idAllegati as id_allegati,
                                            rar.idRegistri as id_registri
                                            ')
            ->from('UserBundle:Allegati', 'a')
            ->leftJoin('UserBundle:RelAllegatiRegistri', 'rar', 'WITH', 'a.id = rar.idAllegati')
            ->where('1=1' . $filter)
            ->setParameters($parameters);

        //print_r($query->getDql());
        //print_r($query->getQuery()->getSql());

        //return $query->getQuery()->getResult(\Doctrine\ORM\Query::HYDRATE_SCALAR);
        $array = array ();
        foreach ($query->getQuery()->getResult() as $item) {
            $path_parts = pathinfo($item['file']);

            $array[] = array(
                'id' => $item['id'],
                'data' => filemtime($item['file']) * 1000,
                'nome' => $path_parts['basename'],
                'tipo' => $path_parts['extension'],
                'relURI' => $item['file'],
                'dimensione' => filesize($item['file'])
            );
        }



        return $array;
    }


/*    public function getAllegatiByIdRegistro($codiceTitolario, $denominazioneTitolario, $numeroFascicolo, $idRegistro) {

        //$path = "/var/www/clients/client1/web11/web/web/files/REGISTRO_MOSIC/";
        $path = Costanti::PATH_ALLEGATI_REGISTRI;

        $removeAccent = $this->sostituisciAccenti($denominazioneTitolario);
        $pathTitolario = $codiceTitolario . " - " . strtoupper($removeAccent) . "/";
        $pathFascicolo = $numeroFascicolo . "/";
        $pathFinale = $path . $pathTitolario . $pathFascicolo;

        $array = array();

        if (is_dir($pathFinale)) {
            $finder = new Finder();
            $finder->in($pathFinale);

            foreach ($finder as $file) {
                $exploda_nome = explode("-",$file->getRelativePathname());
                if ($exploda_nome[0] == $idRegistro) {
                    $path_parts = pathinfo($file);
                    $array[] = array(
                        'data' => filemtime($file) * 1000,
                        'nome' => $file->getRelativePathname(),
                        'tipo' => $path_parts['extension'],
                        'relURI' => "files/REGISTRO_MOSIC/" . $pathTitolario . $pathFascicolo . $file->getRelativePathname(),
                        'dimensione' => $file->getSize()
                    );
                }
            }
        } else {
            return false;
        }

        return $array;
    }*/
    
    
    
    
    
    
    
    
}
