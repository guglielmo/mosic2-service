<?php

namespace UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Finder\Finder;
use UserBundle\Entity\Costanti;

/**
 * PreCipeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */


class PreCipeRepository extends \Doctrine\ORM\EntityRepository
{
    use \UserBundle\Helper\ControllerHelper;


    public function listaPrecipe($limit, $offset, $sortBy, $sortType) {
        $parameters = array ();
        $filter = "";

        $qb = $this->getEntityManager();
        $query = $qb
            ->createQueryBuilder()->select('p')
            ->from('UserBundle:PreCipe', 'p')
            ->where('1=1' . $filter)
            ->setParameters($parameters)
            ->setFirstResult( $offset )
            ->setMaxResults( $limit )
            ->orderBy('p.'.$sortBy, $sortType);


        //print_r($query->getDql());

        return $query->getQuery()->getResult();
    }




    public function getAllegatiByIdPreCipe($id) {
        $parameters = array ();
        $filter = "";
        $filter .= " AND p.idPreCipe = :id ";
        $parameters['id'] = $id;

        $qb = $this->getEntityManager();

        $query = $qb
            ->createQueryBuilder()->select('a.id as id,
                                            a.data as data,
                                            a.file as file,
                                            p.idAllegati as id_allegati,
                                            p.idPreCipe as id_precipe,
                                            p.tipo as tipo
                                            ')
            ->from('UserBundle:Allegati', 'a')
            ->leftJoin('UserBundle:RelAllegatiPreCipe', 'p', 'WITH', 'a.id = p.idAllegati')
            ->where('1=1' . $filter)
            ->setParameters($parameters);

        //print_r($query->getDql());
        //print_r($query->getQuery()->getSql());

        //return $query->getQuery()->getResult(\Doctrine\ORM\Query::HYDRATE_SCALAR);
        $array = array ();
        foreach ($query->getQuery()->getResult() as $item) {
            $path_parts = pathinfo($item['file']);

            $array[] = array(
                'id' => $item['id'],
                'data' => filemtime($item['file']) * 1000,
                'nome' => $path_parts['basename'],
                'tipo' => $path_parts['extension'],
                'relURI' => $item['file'],
                'dimensione' => filesize($item['file']),
                'tipologia' => $item['tipo']
            );
        }



        return $array;



    }
}
